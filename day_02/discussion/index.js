// Data Types
// In the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two: 
// 1. Primitive Data Types
// 2. Non-primitive data types (Object References)

// PRIMITIVE DATA TYPES
// Primitive data types in JavaScript include:
/*
	1. Numbers - Integers, floats
	2. Strings - Any data under single quote, double quote, or backtick quote. 
	3. Booleans - true or false value
	4. Null - empty value or no value
	5. Undefined - a declared variable without a value. 
	6. Symbol - A unique value that can be generated by Symbol Constructor
*/
// Non-primitive Data Types
// Non-primitive data types in JavaScript Includes: 
/*
	1. Objects
	2. Arrays
*/

// Now, let us see what exactly primite and non-primitive data types mean. Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created, we cannot modify it. 
// Example: 
let word = 'JavaScript';

// If we try to modify the string stored in variable "word", JavaScript would raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type. 

	word[0] = 'Y';

// This expression does not change the string store in the variable "word". So, we can say that strings are not modifiable or in other words, immutable. Primitive data types are compared by its values. Let us compare different data values. See the example below. 

let numOne = 3;
let numTwo = 3;

console.log(numOne == numTwo); 

let js = 'JavaScript'
let py = 'Python'

console.log(js == py)             //false 

let lightOn = true
let lightOff = false

console.log(lightOn == lightOff) // false

// NON-PRIMITIVE DATA TYPES
/*
	Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created. Let us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array value are referenced by their index. In JavaScript array, index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc.
*/
let nums = [1, 2, 3]
nums[0] = 10

console.log(nums)  // [10, 2, 3]
/*
	As you can see, an array, which is non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and value, they are not strictly equal. 
*/
let numsky = [1, 2, 3]
let numbers = [1, 2, 3]

console.log(numsky == numbers)  // false

let userOne = {
name:'Asabeneh',
role:'teaching',
country:'Finland'
}

let userTwo = {
name:'Asabeneh',
role:'teaching',
country:'Finland'
}

console.log(userOne == userTwo) // false

/*
	Rule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal is they refer to the same underlying object. 
*/
let num02 = [1, 2, 3]
let numbers02 = num02

console.log(num02 == numbers02)  // true

let userOne_01 = {
name:'Asabeneh',
role:'teaching',
country:'Finland'
}

let userTwo_02 = userOne_01

console.log(userOne_01 == userTwo_02)  // true

// NUMBERS
// - Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers. 

// Declaring Number Data Types
let age = 35
const gravity = 9.81  // we use const for non-changing values, gravitational constant in  m/s2
let mass = 72         // mass in Kilogram
const PI = 3.14       // pi a geometrical constant

// More Examples
const boilingPoint = 100 // temperature in oC, boiling point of water which is a constant
const bodyTemp = 37      // oC average human body temperature, which is a constant

console.log(age, gravity, mass, PI, boilingPoint, bodyTemp)

// Math Object
// - In JavaScript, the Math Object provides a lot of method to work with numbers. 

console.log(PI)                            // 3.141592653589793

// Rounding to the closest number
// if above .5 up if less 0.5 down rounding

console.log(Math.round(PI))                // 3 to round values to the nearest number

console.log(Math.round(9.81))              // 10

console.log(Math.floor(PI))                // 3 rounding down

console.log(Math.ceil(PI))                 // 4 rounding up

console.log(Math.min(-5, 3, 20, 4, 5, 10)) // -5, returns the minimum value

console.log(Math.max(-5, 3, 20, 4, 5, 10)) // 20, returns the maximum value

const randNum = Math.random() // creates random number between 0 to 0.999999
console.log(randNum)

// Let us  create random number between 0 to 10

const num = Math.floor(Math.random () * 11) // creates random number between 0 and 10
console.log(num)

//Absolute value
console.log(Math.abs(-10))      // 10

//Square root
console.log(Math.sqrt(100))     // 10

console.log(Math.sqrt(2))       // 1.4142135623730951

// Power
console.log(Math.pow(3, 2))     // 9

console.log(Math.E)             // 2.718

// Logarithm
// Returns the natural logarithm with base E of x, Math.log(x)
console.log(Math.log(2))        // 0.6931471805599453
console.log(Math.log(10))       // 2.302585092994046

// Returns the natural logarithm of 2 and 10 respectively
console.log(Math.LN2)           // 0.6931471805599453
console.log(Math.LN10)          // 2.302585092994046

// Trigonometry
Math.sin(0)
Math.sin(60)

Math.cos(0)
Math.cos(60)

// Random Number Generator
// - The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999...
let randomNum = Math.random() // generates 0 to 0.999...

// Now, let us see how we can use random() method to generate a random number between 0 and 10:
randomNum = Math.random()         // generates 0 to 0.999
let numBtnZeroAndTen = randomNum * 11

console.log(numBtnZeroAndTen)         // this gives: min 0 and max 10.99

let randomNumRoundToFloor = Math.floor(numBtnZeroAndTen)
console.log(randomNumRoundToFloor)    // this gives between 0 and 10